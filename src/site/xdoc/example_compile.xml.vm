<?xml version="1.0" encoding="UTF-8"?>
<document>
  <properties>
    <title>scala-maven-plugin</title>
    <author>David Bernard</author>
  </properties>
  <body>
    <h1>Compiling Scala sources</h1>

    <span>Prerequis : <a href="usage.html">common usages</a></span>

    <section name="Compiling">
      <p>
        Place scala sources files in :
        <source>src/main/scala</source>
      </p>
      <p>
        Place scala test sources files in :
        <source>src/test/scala</source>
      </p>
      <p>
        Then use the standard maven phases :
        <source><![CDATA[# compile only
mvn compile
# or compile and test
mvn test
# or compile, test and package
mvn package]]></source>
      </p>
      <p>
        Or the plugin specifics goal :
        <source><![CDATA[# compile source
mvn scala:compile
# compile test
mvn scala:testCompile]]></source>
      </p>
      <p>
        Or if you want to compile only source (from main and test) without calling previous phases like check resources, generate-sources,... :
        <source><![CDATA[# compile source and test with fsc
mvn scala:cc -Donce=true
# compile source and test with scalac
mvn scala:cc -Donce=true -Dfsc=false]]></source>
        WARNING:
        <ul>
        <li>This feature is provide for integration with editor.</li>
        <li>using once and fsc => reuse server if previously started else start a new one but never stop it (except if you call scala:cc without -Donce=true, or if you kill the process yourself)</li>
        </ul>
      </p>
    </section>
    <section name="Increasing memory">
      <source><![CDATA[<project>
  ...
      <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>${project.artifactId}</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <jvmArgs>
            <jvmArg>-Xms64m</jvmArg>
            <jvmArg>-Xmx1024m</jvmArg>
          </jvmArgs>
        </configuration>
      </plugin>
  ...
</project>]]></source>
    </section>
    <section name="Emacs user">
      <p>If you are an emacs user, you can run the compilation with "-DemacsMode=true", then compilation error will be displayed without [WARNING] at the beginning of the line like :
      <source><![CDATA[[INFO] Compiling 1 source files to /home/dwayne/work/oss/scala-tools/vscaladoc/target/classes
[WARNING] Compilation failure

/project/src/main/scala/org/example/Main.scala:12: error: expected class or object definition
foo()
^
one error found]]></source>
       </p>
	</section>

    <section name="Compiler Arguments">
        <p>It is common to wish to send arguments to the scalac compiler during compilation of your project.  To do so, make use of the args configuration parameter like so:</p>
        <source><![CDATA[<project>
  ...
  <plugin>
    <groupId>${project.groupId}</groupId>
    <artifactId>${project.artifactId}</artifactId>
    <version>${project.version}</version>
    <configuration>
      <args>
        <arg>-unchecked</arg>
        <arg>-deprecation</arg>
        <arg>-explaintypes</arg>
      </args>
    </configuration>
  </plugin>
  ...
</project>]]></source>
    </section>
    <section name="Use local scala's jar">
        <p>If you want to try to compile with a local installation of scala for any reason like :
            <ul>
            <li>testing an unreleased version of Scala, for instance to report/reproduce a bug in a maven project</li>
            <li>running integration builds against a different branch of the Scala compiler (community build)</li>
            <li>using special flavors of Scala, such as paradise/macros </li>
            </ul>
        </p>
        <p>You should define property "scala.home". DO NOT DEPLOY (or install) with this option, it'll break user's projects.</p>
        <p>In this case ${scala.home}/lib/scala-library.jar and ${scala.home}/lib/scala-compiler.jar are used to compile, to run,...</p>
        <source><![CDATA[mvn compile -Dscala.home=<path/of/scalaHome>]]></source>
    </section>
  </body>
</document>
